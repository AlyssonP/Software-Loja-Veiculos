package View;

import Model.Entity.Carro;
import Model.Entity.Cliente;
import Model.Entity.FormaPagamento;
import Model.Entity.Funcionario;
import Model.Entity.Moto;
import Model.Entity.Veiculo;
import Model.Entity.Venda;
import Model.Repository.CarroRepository;
import Model.Repository.ClienteRepository;
import Model.Repository.FormaPagamentoRepository;
import Model.Repository.FuncionarioRepository;
import Model.Repository.MotoRepository;
import Model.Repository.VeiculoRepository;
import Model.Repository.VendaRepository;
import java.awt.CardLayout;
import java.awt.Color;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alyssonp
 */
public class Gerenciador extends javax.swing.JFrame {
    private static final CarroRepository carroRepository = new CarroRepository();
    private static final MotoRepository motoRepository = new MotoRepository();
    private static final VeiculoRepository veiculoRepository = new VeiculoRepository();
    private static final ClienteRepository clienteRepository = new ClienteRepository();
    private static final FuncionarioRepository funcionarioRepository = new FuncionarioRepository();
    private static final VendaRepository vendaRepository = new VendaRepository();
    private static final FormaPagamentoRepository formaPagamentoRepository = new FormaPagamentoRepository();
    
    private static DateTimeFormatter formatterSemTraco = DateTimeFormatter.ofPattern("ddMMYYYY");
    private static DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    private static DateTimeFormatter formatterDataNormal = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    
    private Color colorEnable, colorDisabled;
    /**
     * Creates new form Gerenciador
     */
    public Gerenciador() {
        initComponents();
        colorEnable = new Color(237,114,114);
        colorDisabled = new Color(212,20,20);
        btnCarroMouseClicked(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        navbar = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnCarro = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnMotos = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        btnClientes = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        btnVendas = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        btnFuncionarios = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        main = new javax.swing.JPanel();
        PageCarros = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCarros = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        inputModeloCarro = new javax.swing.JTextField();
        inputPlacaCarro = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        inputMarcaCarro = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        inputAnoCarro = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        cbCambio = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        inputKmCarro = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        cbTipoCombustivel = new javax.swing.JComboBox<>();
        btnCadastrarCarro = new javax.swing.JButton();
        inputPrecoVendaCarro = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        inputCorCarro = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        cbQtdPortas = new javax.swing.JComboBox<>();
        btnAtualizarCarro = new javax.swing.JButton();
        btnExcluirCarro = new javax.swing.JButton();
        btnLimparInputsCarro = new javax.swing.JButton();
        btnDesselecionar = new javax.swing.JButton();
        PageMotos = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableMotos = new javax.swing.JTable();
        jLabel22 = new javax.swing.JLabel();
        inputModeloMoto = new javax.swing.JTextField();
        inputPlacaMoto = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        inputMarcaMoto = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        inputAnoMoto = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        inputKmMoto = new javax.swing.JTextField();
        btnCadastrarMoto = new javax.swing.JButton();
        inputPrecoVendaMoto = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        inputCorMoto = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        btnAtualizarMoto = new javax.swing.JButton();
        btnExcluirMoto = new javax.swing.JButton();
        btnLimparInputsMoto = new javax.swing.JButton();
        btnDesselecionar02 = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        inputCilindradaMoto = new javax.swing.JTextField();
        PageClientes = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableClientes = new javax.swing.JTable();
        jLabel25 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        inputCpfCliente = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        inputNomeCliente = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        inputCelularCliente = new javax.swing.JFormattedTextField();
        jLabel27 = new javax.swing.JLabel();
        inputEmailCliente = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        inputDataNascimentoCliente = new javax.swing.JFormattedTextField();
        btnLimparCamposCliente = new javax.swing.JButton();
        btnCadastrarCliente = new javax.swing.JButton();
        btnAtualizarCliente = new javax.swing.JButton();
        btnExcluirCliente = new javax.swing.JButton();
        btnDesselecionarCliente = new javax.swing.JButton();
        PageVendas = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        inputPlacaVeiculo = new javax.swing.JTextField();
        cpfClienteVenda = new javax.swing.JFormattedTextField();
        btnBustarCliente = new javax.swing.JButton();
        btnBuscarVeiculo = new javax.swing.JButton();
        resultBuscaCliente = new javax.swing.JLabel();
        resultBuscaVeiculo = new javax.swing.JLabel();
        cbFormasPagamento = new javax.swing.JComboBox<>();
        jLabel45 = new javax.swing.JLabel();
        inputDataVenda = new javax.swing.JFormattedTextField();
        btnCadastrarVenda = new javax.swing.JButton();
        btnAtualizarVenda = new javax.swing.JButton();
        btnExcluirVenda = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableVendas = new javax.swing.JTable();
        btnDesselecionarVenda = new javax.swing.JButton();
        btnDataAtual = new javax.swing.JButton();
        btnLimparCamposVenda = new javax.swing.JButton();
        btnCriarPagamento = new javax.swing.JButton();
        PageFuncionarios = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableFuncionarios = new javax.swing.JTable();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        inputCpfFuncionario = new javax.swing.JFormattedTextField();
        jLabel35 = new javax.swing.JLabel();
        inputNomeFuncionario = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        inputCelularFuncionario = new javax.swing.JFormattedTextField();
        jLabel37 = new javax.swing.JLabel();
        inputEmailFuncionario = new javax.swing.JTextField();
        btnLimparCamposCliente1 = new javax.swing.JButton();
        btnCadastrarFuncionario = new javax.swing.JButton();
        btnAtualizarFuncionario = new javax.swing.JButton();
        btnExcluirFuncionario = new javax.swing.JButton();
        btnDesselecionarFuncionario = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        inputSenhaAcesso = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SHOP MOTORS - Gerenciamento");

        navbar.setBackground(new java.awt.Color(212, 20, 20));
        navbar.setPreferredSize(new java.awt.Dimension(178, 40));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 20)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Shop Motors");

        btnCarro.setBackground(new java.awt.Color(237, 114, 114));
        btnCarro.setToolTipText("Carros"); // NOI18N
        btnCarro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCarroMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Carros");

        javax.swing.GroupLayout btnCarroLayout = new javax.swing.GroupLayout(btnCarro);
        btnCarro.setLayout(btnCarroLayout);
        btnCarroLayout.setHorizontalGroup(
            btnCarroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnCarroLayout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap(10, Short.MAX_VALUE))
        );
        btnCarroLayout.setVerticalGroup(
            btnCarroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnCarroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnMotos.setBackground(new java.awt.Color(212, 20, 20));
        btnMotos.setToolTipText("Motos");
        btnMotos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMotosMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Motos");

        javax.swing.GroupLayout btnMotosLayout = new javax.swing.GroupLayout(btnMotos);
        btnMotos.setLayout(btnMotosLayout);
        btnMotosLayout.setHorizontalGroup(
            btnMotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnMotosLayout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addContainerGap(10, Short.MAX_VALUE))
        );
        btnMotosLayout.setVerticalGroup(
            btnMotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnMotosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnClientes.setBackground(new java.awt.Color(212, 20, 20));
        btnClientes.setToolTipText("Clientes");
        btnClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClientesMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Clientes");

        javax.swing.GroupLayout btnClientesLayout = new javax.swing.GroupLayout(btnClientes);
        btnClientes.setLayout(btnClientesLayout);
        btnClientesLayout.setHorizontalGroup(
            btnClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnClientesLayout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addContainerGap(10, Short.MAX_VALUE))
        );
        btnClientesLayout.setVerticalGroup(
            btnClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnClientesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnVendas.setBackground(new java.awt.Color(212, 20, 20));
        btnVendas.setToolTipText("Vendas");
        btnVendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVendasMouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Vendas");

        javax.swing.GroupLayout btnVendasLayout = new javax.swing.GroupLayout(btnVendas);
        btnVendas.setLayout(btnVendasLayout);
        btnVendasLayout.setHorizontalGroup(
            btnVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnVendasLayout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addContainerGap(10, Short.MAX_VALUE))
        );
        btnVendasLayout.setVerticalGroup(
            btnVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnVendasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnFuncionarios.setBackground(new java.awt.Color(212, 20, 20));
        btnFuncionarios.setToolTipText("Funcionarios");
        btnFuncionarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFuncionariosMouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Funcionários");

        javax.swing.GroupLayout btnFuncionariosLayout = new javax.swing.GroupLayout(btnFuncionarios);
        btnFuncionarios.setLayout(btnFuncionariosLayout);
        btnFuncionariosLayout.setHorizontalGroup(
            btnFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnFuncionariosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        btnFuncionariosLayout.setVerticalGroup(
            btnFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnFuncionariosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout navbarLayout = new javax.swing.GroupLayout(navbar);
        navbar.setLayout(navbarLayout);
        navbarLayout.setHorizontalGroup(
            navbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navbarLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel5)
                .addGap(30, 30, 30)
                .addComponent(btnCarro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMotos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnVendas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFuncionarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        navbarLayout.setVerticalGroup(
            navbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navbarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(btnCarro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnMotos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnVendas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnFuncionarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        main.setBackground(new java.awt.Color(255, 255, 255));
        main.setLayout(new java.awt.CardLayout());

        PageCarros.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel9.setText("Gerenciamento de Carros");

        tableCarros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Placa", "Marca", "Modelo", "Ano", "Cor", "Preço venda", "Quantidade Portas", "Quilometragem", "Câmbio", "Combustivel", "Vendido"
            }
        ));
        tableCarros.setFocusable(false);
        tableCarros.setGridColor(new java.awt.Color(255, 255, 255));
        tableCarros.setSelectionBackground(new java.awt.Color(128, 26, 26));
        tableCarros.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tableCarros.getTableHeader().setReorderingAllowed(false);
        tableCarros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCarrosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableCarros);

        jLabel11.setText("Modelo:");

        inputPlacaCarro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputPlacaCarroKeyTyped(evt);
            }
        });

        jLabel13.setText("Placa:");

        jLabel14.setText("Marca:");

        jLabel15.setText("Quantidade Portas");

        jLabel16.setText("Ano:");

        jLabel17.setText("Câmbio");

        cbCambio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manual", "Automático" }));

        jLabel18.setText("Quilometragem");

        jLabel19.setText("Combutível");

        cbTipoCombustivel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gasolina", "Etanol", "Flex", "Gás" }));

        btnCadastrarCarro.setText("Cadastrar");
        btnCadastrarCarro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarCarroActionPerformed(evt);
            }
        });

        jLabel20.setText("Preço de venda");

        jLabel21.setText("Cor:");

        cbQtdPortas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "5" }));

        btnAtualizarCarro.setText("Atualizar");
        btnAtualizarCarro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarCarroActionPerformed(evt);
            }
        });

        btnExcluirCarro.setBackground(new java.awt.Color(255, 102, 102));
        btnExcluirCarro.setForeground(new java.awt.Color(255, 255, 255));
        btnExcluirCarro.setText("Excluir");
        btnExcluirCarro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirCarroActionPerformed(evt);
            }
        });

        btnLimparInputsCarro.setText("Limpar");
        btnLimparInputsCarro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparInputsCarroActionPerformed(evt);
            }
        });

        btnDesselecionar.setText("Desselecionar");
        btnDesselecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesselecionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PageCarrosLayout = new javax.swing.GroupLayout(PageCarros);
        PageCarros.setLayout(PageCarrosLayout);
        PageCarrosLayout.setHorizontalGroup(
            PageCarrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PageCarrosLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(PageCarrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PageCarrosLayout.createSequentialGroup()
                        .addGroup(PageCarrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(PageCarrosLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbTipoCombustivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputPrecoVendaCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimparInputsCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(PageCarrosLayout.createSequentialGroup()
                                .addComponent(btnCadastrarCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAtualizarCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExcluirCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDesselecionar)))
                        .addGap(33, 33, 33))
                    .addGroup(PageCarrosLayout.createSequentialGroup()
                        .addGroup(PageCarrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9)
                            .addGroup(PageCarrosLayout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputCorCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputKmCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbQtdPortas, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbCambio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(PageCarrosLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputPlacaCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputModeloCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputMarcaCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputAnoCarro, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 105, Short.MAX_VALUE))))
        );
        PageCarrosLayout.setVerticalGroup(
            PageCarrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PageCarrosLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PageCarrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(inputPlacaCarro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(inputModeloCarro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(inputMarcaCarro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(inputAnoCarro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PageCarrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(inputCorCarro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(inputKmCarro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(cbCambio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(cbQtdPortas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PageCarrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTipoCombustivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20)
                    .addComponent(inputPrecoVendaCarro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimparInputsCarro))
                .addGap(13, 13, 13)
                .addGroup(PageCarrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAtualizarCarro)
                    .addComponent(btnCadastrarCarro)
                    .addComponent(btnExcluirCarro)
                    .addComponent(btnDesselecionar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(143, Short.MAX_VALUE))
        );

        main.add(PageCarros, "cardCarros");

        PageMotos.setBackground(new java.awt.Color(255, 255, 255));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel12.setText("Gerenciamento de Motos");

        tableMotos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Placa", "Marca", "Modelo", "Ano", "Cor", "Preço venda", "Cilindrada", "Quilometragem", "Vendido"
            }
        ));
        tableMotos.setFocusable(false);
        tableMotos.setGridColor(new java.awt.Color(255, 255, 255));
        tableMotos.setSelectionBackground(new java.awt.Color(128, 26, 26));
        tableMotos.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tableMotos.getTableHeader().setReorderingAllowed(false);
        tableMotos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMotosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableMotos);

        jLabel22.setText("Modelo:");

        inputPlacaMoto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputPlacaMotoKeyTyped(evt);
            }
        });

        jLabel23.setText("Placa:");

        jLabel24.setText("Marca:");

        jLabel26.setText("Ano:");

        jLabel28.setText("Quilometragem");

        btnCadastrarMoto.setText("Cadastrar");
        btnCadastrarMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarMotoActionPerformed(evt);
            }
        });

        jLabel30.setText("Preço de venda");

        jLabel31.setText("Cor:");

        btnAtualizarMoto.setText("Atualizar");
        btnAtualizarMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarMotoActionPerformed(evt);
            }
        });

        btnExcluirMoto.setBackground(new java.awt.Color(255, 102, 102));
        btnExcluirMoto.setForeground(new java.awt.Color(255, 255, 255));
        btnExcluirMoto.setText("Excluir");
        btnExcluirMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirMotoActionPerformed(evt);
            }
        });

        btnLimparInputsMoto.setText("Limpar");
        btnLimparInputsMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparInputsMotoActionPerformed(evt);
            }
        });

        btnDesselecionar02.setText("Desselecionar");
        btnDesselecionar02.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesselecionar02ActionPerformed(evt);
            }
        });

        jLabel32.setText("Cilindrada");

        javax.swing.GroupLayout PageMotosLayout = new javax.swing.GroupLayout(PageMotos);
        PageMotos.setLayout(PageMotosLayout);
        PageMotosLayout.setHorizontalGroup(
            PageMotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PageMotosLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(PageMotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PageMotosLayout.createSequentialGroup()
                        .addComponent(btnLimparInputsMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(PageMotosLayout.createSequentialGroup()
                        .addGroup(PageMotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addGroup(PageMotosLayout.createSequentialGroup()
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputCorMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel28)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputKmMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputCilindradaMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel30))
                            .addGroup(PageMotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(PageMotosLayout.createSequentialGroup()
                                    .addComponent(btnCadastrarMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnAtualizarMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnExcluirMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDesselecionar02))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 777, Short.MAX_VALUE))
                            .addGroup(PageMotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(inputPrecoVendaMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PageMotosLayout.createSequentialGroup()
                                    .addComponent(jLabel23)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(inputPlacaMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel22)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(inputModeloMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel24)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(inputMarcaMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel26)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(inputAnoMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(28, 28, 28))))
        );
        PageMotosLayout.setVerticalGroup(
            PageMotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PageMotosLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PageMotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(inputPlacaMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(inputModeloMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(inputMarcaMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(inputAnoMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PageMotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(inputCorMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(inputKmMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32)
                    .addComponent(inputCilindradaMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30)
                    .addComponent(inputPrecoVendaMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimparInputsMoto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PageMotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAtualizarMoto)
                    .addComponent(btnCadastrarMoto)
                    .addComponent(btnExcluirMoto)
                    .addComponent(btnDesselecionar02))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );

        main.add(PageMotos, "cardMotos");

        PageClientes.setBackground(new java.awt.Color(255, 255, 255));

        tableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cpf", "Nome", "Celular", "Email", "Data de Nasicmento"
            }
        ));
        tableClientes.setSelectionBackground(new java.awt.Color(128, 26, 26));
        tableClientes.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tableClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableClientes);
        if (tableClientes.getColumnModel().getColumnCount() > 0) {
            tableClientes.getColumnModel().getColumn(4).setHeaderValue("Senha de Acesso");
        }

        jLabel25.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel25.setText("Gerenciamento de Clientes");

        jLabel1.setText("CPF:");

        try {
            inputCpfCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel4.setText("Nome:");

        jLabel10.setText("Celular:");

        try {
            inputCelularCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)#####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        inputCelularCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputCelularClienteActionPerformed(evt);
            }
        });

        jLabel27.setText("Email:");

        inputEmailCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputEmailClienteActionPerformed(evt);
            }
        });

        jLabel29.setText("Data de Nascimento:");

        try {
            inputDataNascimentoCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btnLimparCamposCliente.setText("Limpar");
        btnLimparCamposCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparCamposClienteActionPerformed(evt);
            }
        });

        btnCadastrarCliente.setText("Cadastrar");
        btnCadastrarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarClienteActionPerformed(evt);
            }
        });

        btnAtualizarCliente.setText("Atualizar");
        btnAtualizarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarClienteActionPerformed(evt);
            }
        });

        btnExcluirCliente.setBackground(new java.awt.Color(255, 102, 102));
        btnExcluirCliente.setText("Excluir");
        btnExcluirCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirClienteActionPerformed(evt);
            }
        });

        btnDesselecionarCliente.setText("Desselecionar");
        btnDesselecionarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesselecionarClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PageClientesLayout = new javax.swing.GroupLayout(PageClientes);
        PageClientes.setLayout(PageClientesLayout);
        PageClientesLayout.setHorizontalGroup(
            PageClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PageClientesLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(PageClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PageClientesLayout.createSequentialGroup()
                        .addGroup(PageClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addGroup(PageClientesLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputCpfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputCelularCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PageClientesLayout.createSequentialGroup()
                                .addComponent(jLabel29)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputDataNascimentoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputEmailCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimparCamposCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 133, Short.MAX_VALUE))
                    .addGroup(PageClientesLayout.createSequentialGroup()
                        .addComponent(btnCadastrarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAtualizarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluirCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDesselecionarCliente)))
                .addGap(35, 35, 35))
        );
        PageClientesLayout.setVerticalGroup(
            PageClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PageClientesLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PageClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inputCpfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(inputNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(inputCelularCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PageClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(inputDataNascimentoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(inputEmailCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimparCamposCliente))
                .addGap(15, 15, 15)
                .addGroup(PageClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrarCliente)
                    .addComponent(btnAtualizarCliente)
                    .addComponent(btnExcluirCliente)
                    .addComponent(btnDesselecionarCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(156, Short.MAX_VALUE))
        );

        main.add(PageClientes, "cardClientes");

        PageVendas.setBackground(new java.awt.Color(255, 255, 255));

        jLabel39.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel39.setText("Gerenciamento de Vendas");

        jLabel40.setText("CPF Cliente:");

        jLabel41.setText("PlacaVeiculo:");

        jLabel42.setText("Forma de Pagamento:");

        inputPlacaVeiculo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputPlacaVeiculoKeyTyped(evt);
            }
        });

        try {
            cpfClienteVenda.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btnBustarCliente.setText("Buscar");
        btnBustarCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBustarClienteMouseClicked(evt);
            }
        });
        btnBustarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBustarClienteActionPerformed(evt);
            }
        });

        btnBuscarVeiculo.setText("Buscar");
        btnBuscarVeiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarVeiculoActionPerformed(evt);
            }
        });

        resultBuscaCliente.setText("Resultado da pesquisa");

        resultBuscaVeiculo.setText("Resultado da pesquisa");

        jLabel45.setText("Data Venda:");

        try {
            inputDataVenda.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btnCadastrarVenda.setText("Cadastrar");
        btnCadastrarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarVendaActionPerformed(evt);
            }
        });

        btnAtualizarVenda.setText("Atualizar");
        btnAtualizarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarVendaActionPerformed(evt);
            }
        });

        btnExcluirVenda.setBackground(new java.awt.Color(255, 102, 102));
        btnExcluirVenda.setText("Excluir");
        btnExcluirVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirVendaActionPerformed(evt);
            }
        });

        tableVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Venda", "CPF Cliente", "Nome Cliente", "Placa Veiculo", "Modelo Veiuclo", "Preço Final", "Data Venda", "Forma Pagamento"
            }
        ));
        tableVendas.setSelectionBackground(new java.awt.Color(128, 26, 26));
        tableVendas.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tableVendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableVendasMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tableVendas);

        btnDesselecionarVenda.setText("Desselecionar");
        btnDesselecionarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesselecionarVendaActionPerformed(evt);
            }
        });

        btnDataAtual.setText("Data Atual");
        btnDataAtual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataAtualActionPerformed(evt);
            }
        });

        btnLimparCamposVenda.setText("Limpar Campos");
        btnLimparCamposVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparCamposVendaActionPerformed(evt);
            }
        });

        btnCriarPagamento.setText("Criar Pagamento");
        btnCriarPagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarPagamentoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PageVendasLayout = new javax.swing.GroupLayout(PageVendas);
        PageVendas.setLayout(PageVendasLayout);
        PageVendasLayout.setHorizontalGroup(
            PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PageVendasLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PageVendasLayout.createSequentialGroup()
                        .addGroup(PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(PageVendasLayout.createSequentialGroup()
                                .addComponent(jLabel45)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputDataVenda))
                            .addComponent(jLabel39)
                            .addGroup(PageVendasLayout.createSequentialGroup()
                                .addComponent(jLabel40)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cpfClienteVenda))
                            .addGroup(PageVendasLayout.createSequentialGroup()
                                .addComponent(jLabel41)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputPlacaVeiculo)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PageVendasLayout.createSequentialGroup()
                                .addGroup(PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(PageVendasLayout.createSequentialGroup()
                                        .addComponent(btnBuscarVeiculo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(resultBuscaVeiculo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(PageVendasLayout.createSequentialGroup()
                                        .addComponent(btnBustarCliente)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(resultBuscaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbFormasPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PageVendasLayout.createSequentialGroup()
                                        .addComponent(jLabel42)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnCriarPagamento))))
                            .addGroup(PageVendasLayout.createSequentialGroup()
                                .addComponent(btnDataAtual)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimparCamposVenda)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PageVendasLayout.createSequentialGroup()
                        .addComponent(btnCadastrarVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAtualizarVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluirVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDesselecionarVenda))
                    .addComponent(jScrollPane5))
                .addGap(35, 35, 35))
        );
        PageVendasLayout.setVerticalGroup(
            PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PageVendasLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PageVendasLayout.createSequentialGroup()
                        .addGroup(PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel42)
                            .addComponent(btnCriarPagamento))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbFormasPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PageVendasLayout.createSequentialGroup()
                        .addGroup(PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel40)
                            .addComponent(cpfClienteVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBustarCliente)
                            .addComponent(resultBuscaCliente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel41)
                            .addComponent(inputPlacaVeiculo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscarVeiculo)
                            .addComponent(resultBuscaVeiculo))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputDataVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel45)
                    .addComponent(btnDataAtual)
                    .addComponent(btnLimparCamposVenda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PageVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrarVenda)
                    .addComponent(btnAtualizarVenda)
                    .addComponent(btnExcluirVenda)
                    .addComponent(btnDesselecionarVenda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        main.add(PageVendas, "cardVendas");

        PageFuncionarios.setBackground(new java.awt.Color(255, 255, 255));

        tableFuncionarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cpf", "Nome", "Celular", "Email"
            }
        ));
        tableFuncionarios.setSelectionBackground(new java.awt.Color(128, 26, 26));
        tableFuncionarios.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tableFuncionarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableFuncionariosMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tableFuncionarios);

        jLabel33.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel33.setText("Gerenciamento de Funcionários");

        jLabel34.setText("CPF:");

        try {
            inputCpfFuncionario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel35.setText("Nome:");

        jLabel36.setText("Celular:");

        try {
            inputCelularFuncionario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)#####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        inputCelularFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputCelularFuncionarioActionPerformed(evt);
            }
        });

        jLabel37.setText("Email:");

        inputEmailFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputEmailFuncionarioActionPerformed(evt);
            }
        });

        btnLimparCamposCliente1.setText("Limpar");
        btnLimparCamposCliente1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparCamposCliente1ActionPerformed(evt);
            }
        });

        btnCadastrarFuncionario.setText("Cadastrar");
        btnCadastrarFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarFuncionarioActionPerformed(evt);
            }
        });

        btnAtualizarFuncionario.setText("Atualizar");
        btnAtualizarFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarFuncionarioActionPerformed(evt);
            }
        });

        btnExcluirFuncionario.setBackground(new java.awt.Color(255, 102, 102));
        btnExcluirFuncionario.setText("Excluir");
        btnExcluirFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirFuncionarioActionPerformed(evt);
            }
        });

        btnDesselecionarFuncionario.setText("Desselecionar");
        btnDesselecionarFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesselecionarFuncionarioActionPerformed(evt);
            }
        });

        jLabel38.setText("Senha:");

        javax.swing.GroupLayout PageFuncionariosLayout = new javax.swing.GroupLayout(PageFuncionarios);
        PageFuncionarios.setLayout(PageFuncionariosLayout);
        PageFuncionariosLayout.setHorizontalGroup(
            PageFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PageFuncionariosLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(PageFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PageFuncionariosLayout.createSequentialGroup()
                        .addGroup(PageFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel33)
                            .addGroup(PageFuncionariosLayout.createSequentialGroup()
                                .addComponent(jLabel34)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputCpfFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputNomeFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputCelularFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PageFuncionariosLayout.createSequentialGroup()
                                .addComponent(jLabel37)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputEmailFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel38)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputSenhaAcesso, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimparCamposCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 133, Short.MAX_VALUE))
                    .addGroup(PageFuncionariosLayout.createSequentialGroup()
                        .addComponent(btnCadastrarFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAtualizarFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluirFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDesselecionarFuncionario)))
                .addGap(35, 35, 35))
        );
        PageFuncionariosLayout.setVerticalGroup(
            PageFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PageFuncionariosLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PageFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(inputCpfFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(inputNomeFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36)
                    .addComponent(inputCelularFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PageFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(inputEmailFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimparCamposCliente1)
                    .addComponent(jLabel38)
                    .addComponent(inputSenhaAcesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(PageFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrarFuncionario)
                    .addComponent(btnAtualizarFuncionario)
                    .addComponent(btnExcluirFuncionario)
                    .addComponent(btnDesselecionarFuncionario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(156, Short.MAX_VALUE))
        );

        main.add(PageFuncionarios, "cardFuncionarios");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(navbar, javax.swing.GroupLayout.DEFAULT_SIZE, 831, Short.MAX_VALUE)
            .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(navbar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    // Navegação
    private void btnCarroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCarroMouseClicked
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) main.getLayout();
        cl.show(main, "cardCarros");

        btnCarro.setBackground(colorEnable);
        btnMotos.setBackground(colorDisabled);
        btnClientes.setBackground(colorDisabled);
        btnVendas.setBackground(colorDisabled);
        btnFuncionarios.setBackground(colorDisabled);

        listarCarros();
    }//GEN-LAST:event_btnCarroMouseClicked

    private void btnMotosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMotosMouseClicked
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) main.getLayout();
        cl.show(main, "cardMotos");

        btnCarro.setBackground(colorDisabled);
        btnMotos.setBackground(colorEnable);
        btnClientes.setBackground(colorDisabled);
        btnVendas.setBackground(colorDisabled);
        btnFuncionarios.setBackground(colorDisabled);

        listarMotos();
    }//GEN-LAST:event_btnMotosMouseClicked

    private void btnClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClientesMouseClicked
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) main.getLayout();
        cl.show(main, "cardClientes");

        btnCarro.setBackground(colorDisabled);
        btnMotos.setBackground(colorDisabled);
        btnClientes.setBackground(colorEnable);
        btnVendas.setBackground(colorDisabled);
        btnFuncionarios.setBackground(colorDisabled);
        
        listarClientes();
    }//GEN-LAST:event_btnClientesMouseClicked

    private void btnVendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVendasMouseClicked
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) main.getLayout();
        cl.show(main, "cardVendas");

        btnCarro.setBackground(colorDisabled);
        btnMotos.setBackground(colorDisabled);
        btnClientes.setBackground(colorDisabled);
        btnVendas.setBackground(colorEnable);
        btnFuncionarios.setBackground(colorDisabled);
        
        listarVendas();
        
        listarFormasPagamento();
    }//GEN-LAST:event_btnVendasMouseClicked

    private void btnFuncionariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFuncionariosMouseClicked
        // TODO add your handling code here:
        CardLayout cl = (CardLayout) main.getLayout();
        cl.show(main, "cardFuncionarios");

        btnCarro.setBackground(colorDisabled);
        btnMotos.setBackground(colorDisabled);
        btnClientes.setBackground(colorDisabled);
        btnVendas.setBackground(colorDisabled);
        btnFuncionarios.setBackground(colorEnable);
        
        listarFormasPagamento();
        
        listarFuncionario();
    }//GEN-LAST:event_btnFuncionariosMouseClicked

    
    // Funções para Gerenciamento de carros
    private void btnCadastrarCarroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarCarroActionPerformed
        // TODO add your handling code here:
        Carro carro = leituraInputsCarro();
        if(carro == null) {
            return;
        }
        
        limparInputsCarro();
        
        carroRepository.createCarro(carro);
        
        listarCarros();
    }//GEN-LAST:event_btnCadastrarCarroActionPerformed

    private void inputPlacaCarroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputPlacaCarroKeyTyped
        // TODO add your handling code here:
        if(inputPlacaCarro.getText().length() >= 7) {
            evt.consume();
        }
    }//GEN-LAST:event_inputPlacaCarroKeyTyped
    
    private void tableCarrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCarrosMouseClicked
        // TODO add your handling code here:
        if(tableCarros.getSelectedRow() != -1) {
            inseirDadosInputTableCarros();
        }
    }//GEN-LAST:event_tableCarrosMouseClicked

    private void btnAtualizarCarroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarCarroActionPerformed
        // TODO add your handling code here:
        if(tableCarros.getSelectedRow() != -1) {
            Carro carro = leituraInputsCarroUpdate();
            if(carro == null) {
                return;
            }

            limparInputsCarro();

            carroRepository.updateCarro(carro);

            listarCarros();
        } else {
            JOptionPane.showInternalMessageDialog(null, "É preciso selecionar uma linha para atualizar.");
        }
    }//GEN-LAST:event_btnAtualizarCarroActionPerformed

    private void btnExcluirCarroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirCarroActionPerformed
        // TODO add your handling code here:
        if(tableCarros.getSelectedRow() != -1) {
            String placaCarro = tableCarros.getValueAt(tableCarros.getSelectedRow(), 0).toString();
            int saida = JOptionPane.showInternalConfirmDialog(null, "Tem certeza de excluir esse Carro?", "Excluindo Carro",0);
            if(saida == 0) {
                if(deleteVeiculo(placaCarro)) {
                    listarCarros();
                    limparInputsCarro();
                    JOptionPane.showInternalMessageDialog(null, "Carro excluido com sucesso!!");
                } else {
                    JOptionPane.showInternalMessageDialog(null, "Houve algo ao excluir carro.");
                }
            }            
        } else {
            JOptionPane.showInternalMessageDialog(null, "É preciso selecionar uma linha na tabela para excluir um carro.");
        }
    }//GEN-LAST:event_btnExcluirCarroActionPerformed

    private void btnLimparInputsCarroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparInputsCarroActionPerformed
        // TODO add your handling code here:
        limparInputsCarro();
        
    }//GEN-LAST:event_btnLimparInputsCarroActionPerformed

    private void btnDesselecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesselecionarActionPerformed
        // TODO add your handling code here:
        tableCarros.clearSelection();
    }//GEN-LAST:event_btnDesselecionarActionPerformed
    
    
    // Funções para Gerenciamento de Motos
    private void tableMotosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMotosMouseClicked
        // TODO add your handling code here:
        if(tableMotos.getSelectedRow() != -1) {
            inseirDadosInputTableMotos();
        }
    }//GEN-LAST:event_tableMotosMouseClicked

    private void inputPlacaMotoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputPlacaMotoKeyTyped
        // TODO add your handling code here:
        if(inputPlacaMoto.getText().length() >= 7) {
            evt.consume();
        }
    }//GEN-LAST:event_inputPlacaMotoKeyTyped

    private void btnCadastrarMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarMotoActionPerformed
        // TODO add your handling code here:
        Moto moto = leituraInputsMoto();
        if(moto == null) {
            return;
        }
        
        limparInputsMoto();
        
        motoRepository.createMoto(moto);
        
        listarMotos();
    }//GEN-LAST:event_btnCadastrarMotoActionPerformed

    private void btnAtualizarMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarMotoActionPerformed
        // TODO add your handling code here:
        if(tableMotos.getSelectedRow() != -1) {
             Moto moto = leituraInputsMotoUpdate();
            if(moto == null) {
                return;
            }

            limparInputsMoto();

            motoRepository.updateMoto(moto);

            listarMotos();
        } else {
            JOptionPane.showInternalMessageDialog(null, "É preciso selecionar uma linha para atualizar.");
        }
       
    }//GEN-LAST:event_btnAtualizarMotoActionPerformed

    private void btnExcluirMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirMotoActionPerformed
        // TODO add your handling code here:
        if(tableMotos.getSelectedRow() != -1) {
            String placaMoto = tableMotos.getValueAt(tableMotos.getSelectedRow(), 0).toString();
            int saida = JOptionPane.showInternalConfirmDialog(null, "Tem certeza de excluir esss Moto?", "Excluindo Moto",0);
            if(saida == 0) {
                if(deleteVeiculo(placaMoto)) {
                    listarMotos();
                    limparInputsMoto();
                    JOptionPane.showInternalMessageDialog(null, "Moto excluida com sucesso!!");
                } else {
                    JOptionPane.showInternalMessageDialog(null, "Houve algo ao excluir carro.");
                }
            }            
        } else {
            JOptionPane.showInternalMessageDialog(null, "É preciso selecionar uma linha na tabela para excluir uma Moto.");
        }
    }//GEN-LAST:event_btnExcluirMotoActionPerformed

    private void btnLimparInputsMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparInputsMotoActionPerformed
        // TODO add your handling code here:
        limparInputsMoto();
    }//GEN-LAST:event_btnLimparInputsMotoActionPerformed

    private void btnDesselecionar02ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesselecionar02ActionPerformed
        // TODO add your handling code here:
        tableMotos.clearSelection();
    }//GEN-LAST:event_btnDesselecionar02ActionPerformed
    
    
    // Fuções para gerenciamento de Clientes
    private void inputCelularClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputCelularClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputCelularClienteActionPerformed

    private void inputEmailClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputEmailClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputEmailClienteActionPerformed

    private void btnLimparCamposClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparCamposClienteActionPerformed
        // TODO add your handling code here:
        limparInputsCliente();
    }//GEN-LAST:event_btnLimparCamposClienteActionPerformed

    private void btnDesselecionarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesselecionarClienteActionPerformed
        // TODO add your handling code here:
        tableClientes.clearSelection();
    }//GEN-LAST:event_btnDesselecionarClienteActionPerformed

    private void tableClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableClientesMouseClicked
        // TODO add your handling code here:
        if(tableClientes.getSelectedRow() != -1) {
            inseirDadosInputTableCliente();
        }
    }//GEN-LAST:event_tableClientesMouseClicked

    private void btnCadastrarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarClienteActionPerformed
        // TODO add your handling code here:
        Cliente cliente = leituraInputsCliente();
        if(cliente == null) {
            return;
        }
        
        System.out.println(clienteRepository.createCliente(cliente));
        
        listarClientes();
        
        limparInputsCliente();
        
    }//GEN-LAST:event_btnCadastrarClienteActionPerformed

    private void btnAtualizarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarClienteActionPerformed
        // TODO add your handling code here:
        Cliente cliente = leituraInputsClienteUpdate();
        if(cliente == null) {
            return;
        }
        
        System.out.println(clienteRepository.updateCliente(cliente));
        
        listarClientes();
        
        limparInputsCliente();
    }//GEN-LAST:event_btnAtualizarClienteActionPerformed

    private void btnExcluirClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirClienteActionPerformed
        // TODO add your handling code here:
        if(tableClientes.getSelectedRow() != -1) {
            String cpfCliente = tableClientes.getValueAt(tableClientes.getSelectedRow(), 0).toString();
            int saida = JOptionPane.showInternalConfirmDialog(null, "Tem certeza de excluir esss Cliente?", "Excluindo Cliente",0);
            if(saida == 0) {
                if(clienteRepository.deleteCliente(cpfCliente)) {
                    listarClientes();
                    limparInputsCliente();
                    JOptionPane.showInternalMessageDialog(null, "Cliente excluido com sucesso!!");
                } else {
                    JOptionPane.showInternalMessageDialog(null, "Houve algo ao excluir Cliente.");
                }
            }            
        } else {
            JOptionPane.showInternalMessageDialog(null, "É preciso selecionar uma linha na tabela para excluir um Cliente.");
        }
    }//GEN-LAST:event_btnExcluirClienteActionPerformed

    
    // Funções para gerenciamento de funcionario
    private void tableFuncionariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableFuncionariosMouseClicked
        // TODO add your handling code here:
        if(tableFuncionarios.getSelectedRow() != -1) {
            inseirDadosInputTableFuncionario();
        }
    }//GEN-LAST:event_tableFuncionariosMouseClicked
    
    private void inputCelularFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputCelularFuncionarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputCelularFuncionarioActionPerformed

    private void inputEmailFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputEmailFuncionarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputEmailFuncionarioActionPerformed

    private void btnLimparCamposCliente1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparCamposCliente1ActionPerformed
        // TODO add your handling code here:
        limparInputsFuncionarios();
    }//GEN-LAST:event_btnLimparCamposCliente1ActionPerformed

    private void btnCadastrarFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarFuncionarioActionPerformed
        // TODO add your handling code here:
        Funcionario funcionario = leituraInputsFuncionario();
        if(funcionario == null) {
            return;
        }
        
        funcionarioRepository.createFuncionario(funcionario);
        
        listarFuncionario();
        
        limparInputsFuncionarios();
    }//GEN-LAST:event_btnCadastrarFuncionarioActionPerformed

    private void btnAtualizarFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarFuncionarioActionPerformed
        // TODO add your handling code here:
        Funcionario funcionario = leituraInputsFuncionarioUpdate();
        if(funcionario == null) {
            return;
        }
        
        funcionarioRepository.updateFuncionario(funcionario);
        
        listarFuncionario();
        
        limparInputsFuncionarios();
    }//GEN-LAST:event_btnAtualizarFuncionarioActionPerformed

    private void btnExcluirFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirFuncionarioActionPerformed
        // TODO add your handling code here:
        if(tableFuncionarios.getSelectedRow() != -1) {
            String cpfFuncionario = tableFuncionarios.getValueAt(tableFuncionarios.getSelectedRow(), 0).toString();
            int saida = JOptionPane.showInternalConfirmDialog(null, "Tem certeza de excluir esss Funcionario?", "Excluindo Funcionario",0);
            if(saida == 0) {
                if(funcionarioRepository.deleteFuncionario(cpfFuncionario)) {
                    listarFuncionario();
                    limparInputsFuncionarios();
                    JOptionPane.showInternalMessageDialog(null, "Funcionário excluido com sucesso!!");
                } else {
                    JOptionPane.showInternalMessageDialog(null, "Houve algo ao excluir Funcionário.");
                }
            }            
        } else {
            JOptionPane.showInternalMessageDialog(null, "É preciso selecionar uma linha na tabela para excluir um Funcionario.");
        }
    }//GEN-LAST:event_btnExcluirFuncionarioActionPerformed

    private void btnDesselecionarFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesselecionarFuncionarioActionPerformed
        // TODO add your handling code here:
        tableFuncionarios.clearSelection();
    }//GEN-LAST:event_btnDesselecionarFuncionarioActionPerformed

    // Funções para gerenciamento de Venda de veiuclos
    private void btnCadastrarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarVendaActionPerformed
        // TODO add your handling code here:
        Venda venda = leituraInputsVenda();
        if(venda == null) {
            return;
        }
        
        vendaRepository.venderVeiculo(venda);
        
        listarVendas();
        
        limparInputsVenda();
    }//GEN-LAST:event_btnCadastrarVendaActionPerformed

    private void btnAtualizarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarVendaActionPerformed
        // TODO add your handling code here:
        Venda venda = leituraInputsVendaUpdate();
        if(venda == null) {
            return;
        }
        
        vendaRepository.updateVenda(venda);
        
        listarVendas();
        
        limparInputsVenda();
    }//GEN-LAST:event_btnAtualizarVendaActionPerformed

    private void btnExcluirVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirVendaActionPerformed
        // TODO add your handling code here:
        if(tableVendas.getSelectedRow() != -1) {
            String placa = tableVendas.getValueAt(tableVendas.getSelectedRow(), 3).toString();
            int saida = JOptionPane.showInternalConfirmDialog(null, "Tem certeza de excluir essa Venda?", "Excluindo Venda",0);
            Venda venda = vendaRepository.getVenda(placa);
            if(saida == 0) {
                if(vendaRepository.deleteVenda(venda)) {
                    listarVendas();
                    limparInputsVenda();
                    JOptionPane.showInternalMessageDialog(null, "Venda excluida com sucesso!!");
                } else {
                    JOptionPane.showInternalMessageDialog(null, "Houve algo ao excluir Venda.");
                }
            }            
        } else {
            JOptionPane.showInternalMessageDialog(null, "É preciso selecionar uma linha na tabela para excluir uma Venda.");
        }
    }//GEN-LAST:event_btnExcluirVendaActionPerformed

    private void tableVendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableVendasMouseClicked
        // TODO add your handling code here:
        if(tableVendas.getSelectedRow() != -1) {
            inseirDadosInputTableVenda();
        }
    }//GEN-LAST:event_tableVendasMouseClicked

    private void btnDesselecionarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesselecionarVendaActionPerformed
        // TODO add your handling code here:
        tableVendas.clearSelection();
    }//GEN-LAST:event_btnDesselecionarVendaActionPerformed

    private void btnBustarClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBustarClienteMouseClicked
        // TODO add your handling code here:
        
        buscarCliente(inputCpfCliente(cpfClienteVenda));
    }//GEN-LAST:event_btnBustarClienteMouseClicked

    private void inputPlacaVeiculoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputPlacaVeiculoKeyTyped
        // TODO add your handling code here:
        if(inputPlacaVeiculo.getText().length() >= 7) {
            evt.consume();
        }
    }//GEN-LAST:event_inputPlacaVeiculoKeyTyped

    private void btnBuscarVeiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarVeiculoActionPerformed
        // TODO add your handling code here:
        buscarVeiculo(inputPlacaVeiculo(inputPlacaVeiculo));
    }//GEN-LAST:event_btnBuscarVeiculoActionPerformed

    private void btnDataAtualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataAtualActionPerformed
        // TODO add your handling code here:
        inputDataVenda.setText(dataHoje());
    }//GEN-LAST:event_btnDataAtualActionPerformed

    private void btnLimparCamposVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparCamposVendaActionPerformed
        // TODO add your handling code here:
        limparInputsVenda();
    }//GEN-LAST:event_btnLimparCamposVendaActionPerformed

    private void btnBustarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBustarClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBustarClienteActionPerformed

    private void btnCriarPagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarPagamentoActionPerformed
        // TODO add your handling code here:
        new GerenciarFormasPagamento().setVisible(true);
    }//GEN-LAST:event_btnCriarPagamentoActionPerformed
    
    
    /*
    Métodos Especiais.
    */
    
    public boolean deleteVeiculo(String placa) {
        return veiculoRepository.deleteVeiculo(placa);
    }
    
    public boolean isVeiculoCadastrado(String placa) {
        Veiculo veiculo = veiculoRepository.getVeiculo(placa);
        if(veiculo == null) {
            return false;
        }
        return true;
    }
    
    // Métodos para carro.
    public void inseirDadosInputTableCarros() {
        inputPlacaCarro.setText(tableCarros.getValueAt(tableCarros.getSelectedRow(), 0).toString());
        inputMarcaCarro.setText(tableCarros.getValueAt(tableCarros.getSelectedRow(), 1).toString());
        inputModeloCarro.setText(tableCarros.getValueAt(tableCarros.getSelectedRow(), 2).toString());
        inputAnoCarro.setText(tableCarros.getValueAt(tableCarros.getSelectedRow(), 3).toString());
        inputCorCarro.setText(tableCarros.getValueAt(tableCarros.getSelectedRow(), 4).toString());
        inputPrecoVendaCarro.setText(tableCarros.getValueAt(tableCarros.getSelectedRow(), 5).toString());
        inputKmCarro.setText(tableCarros.getValueAt(tableCarros.getSelectedRow(),7).toString());
        cbQtdPortas.setSelectedItem(tableCarros.getValueAt(tableCarros.getSelectedRow(),6).toString());
        cbCambio.setSelectedItem(tableCarros.getValueAt(tableCarros.getSelectedRow(),8).toString());
        cbTipoCombustivel.setSelectedItem(tableCarros.getValueAt(tableCarros.getSelectedRow(),9).toString());
    }
            
    public Carro leituraInputsCarro() {
        String placaCarro = inputPlacaCarro.getText().toUpperCase();
        // Verificando se a placa já foi cadastrada em outro veiuclo.
        if(placaCarro.length() < 7) {
            JOptionPane.showInternalMessageDialog(null, "A placa tem que conter 7 digitos.");
            return null;
        }
        if(isVeiculoCadastrado(placaCarro)) {
            JOptionPane.showInternalMessageDialog(null, "Veículo já cadastrado no sistema");
            return null;
        }
        
        String marcaCarro = inputMarcaCarro.getText();
        String modeloCarro = inputModeloCarro.getText();
        String corCarro = inputCorCarro.getText();
        
        int anoCarro = 0;
        try {
            if(inputAnoCarro.getText().length() != 0) {
                anoCarro = Integer.parseInt(inputAnoCarro.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "O ano tem que informado por números.");
            return null;
        }
        
        double precoVendaCarro = 0;
        try {
            if(inputPrecoVendaCarro.getText().length() != 0) {
                precoVendaCarro = Double.parseDouble(inputPrecoVendaCarro.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "O preço tem que informado por números.");
            return null;
        }
        
        double kmCarro = 0;
        try {
            if(inputKmCarro.getText().length() != 0) {
                kmCarro = Double.parseDouble(inputKmCarro.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "A quilometragem tem que informado por números.");
            return null;
        }
        
        int qtdPorta = Integer.parseInt((String) cbQtdPortas.getSelectedItem());
        String cambio = (String) cbCambio.getSelectedItem();
        String tipoCombustivel = (String) cbTipoCombustivel.getSelectedItem();
        
        if(placaCarro == null || marcaCarro == null || modeloCarro == null || anoCarro == 0 || precoVendaCarro == 0 || kmCarro == 0) {
            JOptionPane.showInternalMessageDialog(null, "Tem algum campo vazio, não será posivel cadastrar véiculo.");
            return null;
        }
        
        Carro carro = new Carro(
                placaCarro,
                marcaCarro,
                modeloCarro,
                anoCarro,
                precoVendaCarro,
                corCarro,
                kmCarro,
                qtdPorta,
                tipoCombustivel,
                cambio
        );
        
        return carro;
    }
    
    public Carro leituraInputsCarroUpdate() {
        String placaCarro = inputPlacaCarro.getText().toUpperCase();
        if(placaCarro.length() < 7) {
            JOptionPane.showInternalMessageDialog(null, "A placa tem que conter 7 digitos.");
            return null;
        }
        
        String marcaCarro = inputMarcaCarro.getText();
        String modeloCarro = inputModeloCarro.getText();
        String corCarro = inputCorCarro.getText();
        
        int anoCarro = 0;
        try {
            if(inputAnoCarro.getText().length() != 0) {
                anoCarro = Integer.parseInt(inputAnoCarro.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "O ano tem que informado por números.");
            return null;
        }
        
        double precoVendaCarro = 0;
        try {
            if(inputPrecoVendaCarro.getText().length() != 0) {
                precoVendaCarro = Double.parseDouble(inputPrecoVendaCarro.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "O preço tem que informado por números.");
            return null;
        }
        
        double kmCarro = 0;
        try {
            if(inputKmCarro.getText().length() != 0) {
                kmCarro = Double.parseDouble(inputKmCarro.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "A quilometragem tem que informado por números.");
            return null;
        }
        
        int qtdPorta = Integer.parseInt((String) cbQtdPortas.getSelectedItem());
        String cambio = (String) cbCambio.getSelectedItem();
        String tipoCombustivel = (String) cbTipoCombustivel.getSelectedItem();
        
        if(placaCarro == null || marcaCarro == null || modeloCarro == null || anoCarro == 0 || precoVendaCarro == 0 || kmCarro == 0) {
            JOptionPane.showInternalMessageDialog(null, "Tem algum campo vazio, não será posivel cadastrar véiculo.");
            return null;
        }
        
        Carro carro = new Carro(
                placaCarro,
                marcaCarro,
                modeloCarro,
                anoCarro,
                precoVendaCarro,
                corCarro,
                kmCarro,
                qtdPorta,
                tipoCombustivel,
                cambio
        );
        
        return carro;
    }
    
    public void limparInputsCarro() {
        inputPlacaCarro.setText("");
        inputMarcaCarro.setText("");
        inputModeloCarro.setText("");
        inputAnoCarro.setText("");
        inputCorCarro.setText("");
        inputKmCarro.setText("");
        inputPrecoVendaCarro.setText("");
    }
    
    public void listarCarros() {
        DefaultTableModel table = (DefaultTableModel) tableCarros.getModel();
        table.setNumRows(0);
        for (Carro carro : carroRepository.getAll()) {
            String vendido = "NÃO";
            if(carro.getVendido()) {
                vendido = "SIM";
            }
            table.addRow(new Object[]{
                carro.getPlaca(),
                carro.getMarca(), 
                carro.getModelo(), 
                carro.getAno(), 
                carro.getCor(),
                carro.getPrecoVenda(),
                carro.getQuatidadePorta(), 
                carro.getQuilomentragem(), 
                carro.getCambio(),
                carro.getTipoCombustivel(),
                vendido
            });
        }
    }
    
    // Métodos para Motos
    public void inseirDadosInputTableMotos() {
        inputPlacaMoto.setText(tableMotos.getValueAt(tableMotos.getSelectedRow(), 0).toString());
        inputMarcaMoto.setText(tableMotos.getValueAt(tableMotos.getSelectedRow(), 1).toString());
        inputModeloMoto.setText(tableMotos.getValueAt(tableMotos.getSelectedRow(), 2).toString());
        inputAnoMoto.setText(tableMotos.getValueAt(tableMotos.getSelectedRow(), 3).toString());
        inputCorMoto.setText(tableMotos.getValueAt(tableMotos.getSelectedRow(), 4).toString());
        inputPrecoVendaMoto.setText(tableMotos.getValueAt(tableMotos.getSelectedRow(), 5).toString());
        inputCilindradaMoto.setText(tableMotos.getValueAt(tableMotos.getSelectedRow(),6).toString());
        inputKmMoto.setText(tableMotos.getValueAt(tableMotos.getSelectedRow(),7).toString());
        
    }
    
    public Moto leituraInputsMoto() {
        String placaMoto = inputPlacaMoto.getText().toUpperCase();
        // Verificando se a placa já foi cadastrada em outro veiuclo.
        if(placaMoto.length() < 7) {
            JOptionPane.showInternalMessageDialog(null, "A placa tem que conter 7 digitos.");
            return null;
        }
        if(isVeiculoCadastrado(placaMoto)) {
            JOptionPane.showInternalMessageDialog(null, "Veículo já cadastrado no sistema");
            return null;
        }
        
        String marcaMoto = inputMarcaMoto.getText();
        String modeloMoto = inputModeloMoto.getText();
        String corMoto = inputCorMoto.getText();
        
        int anoMoto = 0;
        try {
            if(inputAnoMoto.getText().length() != 0) {
                anoMoto = Integer.parseInt(inputAnoMoto.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "O ano tem que informado por números.");
            return null;
        }
        
        double precoVendaMoto = 0;
        try {
            if(inputPrecoVendaMoto.getText().length() != 0) {
                precoVendaMoto = Double.parseDouble(inputPrecoVendaMoto.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "O preço tem que informado por números.");
            return null;
        }
        
        double kmMoto = 0;
        try {
            if(inputKmMoto.getText().length() != 0) {
                kmMoto = Double.parseDouble(inputKmMoto.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "A quilometragem tem que informado por números.");
            return null;
        }
        int cilindrada = 0;
        try {
            if(inputCilindradaMoto.getText().length() != 0) {
                cilindrada = Integer.parseInt(inputCilindradaMoto.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "A Cilindrada tem que informado por números.");
            return null;
        }
        
        if(placaMoto == null || marcaMoto == null || modeloMoto == null || anoMoto == 0 || precoVendaMoto == 0 || kmMoto == 0 || cilindrada == 0) {
            JOptionPane.showInternalMessageDialog(null, "Tem algum campo vazio, não será posivel cadastrar véiculo.");
            return null;
        }
        
        Moto moto = new Moto(
                placaMoto,
                marcaMoto,
                modeloMoto,
                anoMoto,
                precoVendaMoto,
                corMoto,
                kmMoto,
                cilindrada
        );
        
        return moto;
    }
    
    public Moto leituraInputsMotoUpdate() {
        String placaMoto = inputPlacaMoto.getText().toUpperCase();
        // Verificando se a placa já foi cadastrada em outro veiuclo.
        if(placaMoto.length() < 7) {
            JOptionPane.showInternalMessageDialog(null, "A placa tem que conter 7 digitos.");
            return null;
        }
        
        String marcaMoto = inputMarcaMoto.getText();
        String modeloMoto = inputModeloMoto.getText();
        String corMoto = inputCorMoto.getText();
        
        int anoMoto = 0;
        try {
            if(inputAnoMoto.getText().length() != 0) {
                anoMoto = Integer.parseInt(inputAnoMoto.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "O ano tem que informado por números.");
            return null;
        }
        
        double precoVendaMoto = 0;
        try {
            if(inputPrecoVendaMoto.getText().length() != 0) {
                precoVendaMoto = Double.parseDouble(inputPrecoVendaMoto.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "O preço tem que informado por números.");
            return null;
        }
        
        double kmMoto = 0;
        try {
            if(inputKmMoto.getText().length() != 0) {
                kmMoto = Double.parseDouble(inputKmMoto.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "A quilometragem tem que informado por números.");
            return null;
        }
        int cilindrada = 0;
        try {
            if(inputCilindradaMoto.getText().length() != 0) {
                cilindrada = Integer.parseInt(inputCilindradaMoto.getText());
            }
        } catch(NumberFormatException e) {
            JOptionPane.showInternalMessageDialog(null, "A Cilindrada tem que informado por números.");
            return null;
        }
        
        if(placaMoto == null || marcaMoto == null || modeloMoto == null || anoMoto == 0 || precoVendaMoto == 0 || kmMoto == 0 || cilindrada == 0) {
            JOptionPane.showInternalMessageDialog(null, "Tem algum campo vazio, não será posivel cadastrar véiculo.");
            return null;
        }
        
        Moto moto = new Moto(
                placaMoto,
                marcaMoto,
                modeloMoto,
                anoMoto,
                precoVendaMoto,
                corMoto,
                kmMoto,
                cilindrada
        );
        
        return moto;
    }
    
    public void limparInputsMoto() {
        inputPlacaMoto.setText("");
        inputMarcaMoto.setText("");
        inputModeloMoto.setText("");
        inputAnoMoto.setText("");
        inputCorMoto.setText("");
        inputKmMoto.setText("");
        inputCilindradaMoto.setText("");
        inputPrecoVendaMoto.setText("");
    }
    
    public void listarMotos() {
        DefaultTableModel modelo = (DefaultTableModel) tableMotos.getModel();
        modelo.setNumRows(0);
        for (Moto moto : motoRepository.getAll()) {
            String vendido = "NÃO";
            if(moto.getVendido()) {
                vendido = "SIM";
            }
            modelo.addRow(new Object[]{
                moto.getPlaca(),
                moto.getMarca(),
                moto.getModelo(), 
                moto.getAno(), 
                moto.getCor(),
                moto.getPrecoVenda(),
                moto.getCilindrada(), 
                moto.getQuilomentragem(),
                vendido
            });
        }
    }
    
    // Métodos para Clintes
    public boolean isCpfClienteCadastrado(String cpf) {
        Cliente cliente = clienteRepository.getCliente(cpf);
        if(cliente == null) {
            return false;
        }
        return true;
    }
    
    public void inseirDadosInputTableCliente() {
        inputCpfCliente.setText(tableClientes.getValueAt(tableClientes.getSelectedRow(), 0).toString());
        inputNomeCliente.setText(tableClientes.getValueAt(tableClientes.getSelectedRow(), 1).toString());
        inputCelularCliente.setText(tableClientes.getValueAt(tableClientes.getSelectedRow(), 2).toString());
        inputEmailCliente.setText(tableClientes.getValueAt(tableClientes.getSelectedRow(), 3).toString());
        LocalDate saidaData = (LocalDate) tableClientes.getValueAt(tableClientes.getSelectedRow(), 4);
        
        inputDataNascimentoCliente.setText(saidaData.format(formatterDataNormal));
    }
    
    public Cliente leituraInputsCliente() {
        String cpfCliente = inputCpfCliente.getText();
        if(inputCpfCliente.getText().contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de CPF está vazio.");
            return null;
        }
        if(isCpfClienteCadastrado(cpfCliente)) {
            JOptionPane.showInternalMessageDialog(null, "CPF já cadastrado.");
            return null;
        }
        
        String nomeCliente = inputNomeCliente.getText();
        
        if(inputCelularCliente.getText().contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de número celular está vazio.");
            return null;
        }
        String celularCliente = inputCelularCliente.getText();
        String emailCliente = inputEmailCliente.getText();
        if(clienteRepository.isEmailCadastrado(emailCliente)) {
            JOptionPane.showInternalMessageDialog(null, "Email já está em uso.");
            return null;
        }
        
        if(inputDataNascimentoCliente.getText().contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de data está vazio.");
            return null;
        }
        LocalDate dataNascimento = LocalDate.parse(inputDataNascimentoCliente.getText(), formatterDataNormal);
        
        if(nomeCliente.length() == 0 || emailCliente.length() == 0) {
            JOptionPane.showInternalMessageDialog(null, "Tem alguma campo vazio, não é posivel fazer essa ação.");
            return null;
        }
        
        Cliente cliente = new Cliente(cpfCliente, nomeCliente, celularCliente, emailCliente, dataNascimento.format(formatter));
        
        return cliente;
    }
    
    public Cliente leituraInputsClienteUpdate() {
        String cpfCliente = inputCpfCliente.getText();
        if(inputCpfCliente.getText().contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de CPF está vazio.");
            return null;
        }
        
        String nomeCliente = inputNomeCliente.getText();
        
        if(inputCelularCliente.getText().contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de número celular está vazio.");
            return null;
        }
        String celularCliente = inputCelularCliente.getText();
        
        String emailCliente = inputEmailCliente.getText();
        if(inputDataNascimentoCliente.getText().contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de data está vazio.");
            return null;
        }
        
        LocalDate dataNascimento = LocalDate.parse(inputDataNascimentoCliente.getText(), formatterDataNormal);
        
        if(nomeCliente.length() == 0 || emailCliente.length() == 0) {
            JOptionPane.showInternalMessageDialog(null, "Tem alguma campo vazio, não é posivel fazer essa ação.");
            return null;
        }
        
        Cliente cliente = new Cliente(cpfCliente, nomeCliente, celularCliente, emailCliente, dataNascimento.format(formatter));
        
        return cliente;
    }
    
    public void limparInputsCliente() {
        inputCpfCliente.setText("");
        inputNomeCliente.setText("");
        inputCelularCliente.setText("");
        inputEmailCliente.setText("");
        inputDataNascimentoCliente.setText("");
    }
    
    public void listarClientes() {
        DefaultTableModel table = (DefaultTableModel) tableClientes.getModel();
        table.setNumRows(0);
        for (Cliente cliente : clienteRepository.readAll()) {
            table.addRow(new Object[]{
                cliente.getCpf(),
                cliente.getNome(),
                cliente.getCelular(),
                cliente.getEmail(),
                cliente.getDataNascimento()
            });
        }
    }
    
    // Métodos para Venda de veiculo.
    public String inputCpfCliente(javax.swing.JFormattedTextField cpfClienteVenda) {
        if(cpfClienteVenda.getText().contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de CPF está vazio.");
            return null;
        }
        return cpfClienteVenda.getText();
    }
    
    public String inputPlacaVeiculo(javax.swing.JTextField placaVeiculo) {
        if(placaVeiculo.getText().length() < 7) {
            JOptionPane.showInternalMessageDialog(null, "A placa tem que conter 7 digitos.");
            return null;
        } 
        return placaVeiculo.getText();
    }
    
    public Cliente buscarCliente(String cpf) {
        Cliente cliente = clienteRepository.getCliente(cpf);
        if(cliente != null) {
            resultBuscaCliente.setText("Cliente encontrado: "+cliente.getNome());
        } else {
            resultBuscaCliente.setText("Cliente não encontrado, tente outro CPF.");
        }
        
        return cliente;
    }
    
    public Veiculo buscarVeiculo(String placa) {
        Veiculo veiculo = veiculoRepository.getVeiculo(placa.toUpperCase());
        if(veiculo != null) {
            resultBuscaVeiculo.setText("Veículo encontrado: "+veiculo.getModelo());
        } else {
            resultBuscaVeiculo.setText( "Veículo não encontrado");
        }
        
        return veiculo;
    }
    
    public String dataHoje() {
        LocalDate dataAtual = LocalDate.now();
        return dataAtual.format(formatterDataNormal);
    }
    
    public void inseirDadosInputTableVenda() {
        cpfClienteVenda.setText(tableVendas.getValueAt(tableVendas.getSelectedRow(), 1).toString());
        inputPlacaVeiculo.setText(tableVendas.getValueAt(tableVendas.getSelectedRow(), 3).toString());
        
        LocalDate saidaData = (LocalDate) tableVendas.getValueAt(tableVendas.getSelectedRow(), 6);
        inputDataVenda.setText(saidaData.format(formatterDataNormal));
        
        
        FormaPagamento formaPagamento = (FormaPagamento) tableVendas.getValueAt(tableVendas.getSelectedRow(), 7);
        
    }
    
    public Venda leituraInputsVenda() {
        Cliente cliente = buscarCliente(inputCpfCliente(cpfClienteVenda));
        if(cliente == null) {
            return null;
        }
        Veiculo veiculo = buscarVeiculo(inputPlacaVeiculo(inputPlacaVeiculo));
        if(veiculo == null) {
            return null;
        }
        if(veiculo.getVendido()) {
            JOptionPane.showInternalMessageDialog(null, "Veiculo já vendido");
            return null;
        }
        
        if(inputDataVenda.getText().contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de data está vazio.");
            return null;
        }
        //LocalDate dataVenda = LocalDate.parse(inputDataVenda.getText(), formatterDataNormal);
       
        FormaPagamento formaPagamento = (FormaPagamento) cbFormasPagamento.getSelectedItem();
        
        if(inputDataVenda.getText().contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de data está vazio.");
            return null;
        }
        LocalDate dataVenda = LocalDate.parse(inputDataVenda.getText(), formatterDataNormal);
        String data = dataVenda.format(formatter);
        
        
        return new Venda(veiculo, cliente, formaPagamento, data);
    }
    
    public Venda leituraInputsVendaUpdate() {
        int idVenda = 0;
        if(tableVendas.getSelectedRow() != -1) {
            idVenda = Integer.parseInt(tableVendas.getValueAt(tableVendas.getSelectedRow(), 0).toString());
        } else {
            return null;
        }
        
        Cliente cliente = buscarCliente(inputCpfCliente(cpfClienteVenda));
        if(cliente == null) {
            return null;
        }
        Veiculo veiculo = buscarVeiculo(inputPlacaVeiculo(inputPlacaVeiculo));
        if(veiculo == null) {
            return null;
        }
        
        if(inputDataVenda.getText().contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de data está vazio.");
            return null;
        }
        //LocalDate dataVenda = LocalDate.parse(inputDataVenda.getText(), formatterDataNormal);
       
        FormaPagamento formaPagamento = (FormaPagamento) cbFormasPagamento.getSelectedItem();
        
        if(inputDataVenda.getText().contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de data está vazio.");
            return null;
        }
        LocalDate dataVenda = LocalDate.parse(inputDataVenda.getText(), formatterDataNormal);
        String data = dataVenda.format(formatter);
        
        
        
        return new Venda(idVenda,veiculo, cliente, formaPagamento, data);
    }
    
    public void limparInputsVenda() {
        cpfClienteVenda.setText("");
        inputPlacaVeiculo.setText("");
        inputDataVenda.setText("");
        
        listarFormasPagamento();
    }
    
    public void listarFormasPagamento() {
        cbFormasPagamento.removeAllItems();
        for(FormaPagamento formaPagamento : formaPagamentoRepository.getAll()) {
            cbFormasPagamento.addItem(formaPagamento);
        }
    }
    
    public void listarVendas() {
        DefaultTableModel table = (DefaultTableModel) tableVendas.getModel();
        table.setNumRows(0);
        for (Venda venda : vendaRepository.getAll()) {
            table.addRow(new Object[]{
                venda.getId(),
                venda.getCliente().getCpf(),
                venda.getCliente().getNome(),
                venda.getVeiculo().getPlaca(),
                venda.getVeiculo().getModelo(),
                venda.getValorPagamento(),
                venda.getDataVenda(),
                venda.getFormaPagamento()
            });
        }
    }
    
    // Métodos para Funcionarios
    public boolean isCpfFuncionarioCadastrado(String cpf) {
        Funcionario funcionario = funcionarioRepository.getFuncionario(cpf);
        if(funcionario == null) {
            return false;
        }
        return true;
    }
    
    public void inseirDadosInputTableFuncionario() {
        String cpfFun = tableFuncionarios.getValueAt(tableFuncionarios.getSelectedRow(), 0).toString();
        inputCpfFuncionario.setText(cpfFun);
        inputNomeFuncionario.setText(tableFuncionarios.getValueAt(tableFuncionarios.getSelectedRow(), 1).toString());
        inputCelularFuncionario.setText(tableFuncionarios.getValueAt(tableFuncionarios.getSelectedRow(), 2).toString());
        inputEmailFuncionario.setText(tableFuncionarios.getValueAt(tableFuncionarios.getSelectedRow(), 3).toString());

        Funcionario funcionario = funcionarioRepository.getFuncionario(cpfFun);
        inputSenhaAcesso.setText(funcionario.getSenhaAcesso());
    }
    
    public Funcionario leituraInputsFuncionario() {
        String cpfFuncionario = inputCpfFuncionario.getText();
        if(cpfFuncionario.contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de CPF está vazio.");
            return null;
        }
        if(isCpfFuncionarioCadastrado(cpfFuncionario)) {
            JOptionPane.showInternalMessageDialog(null, "CPF já cadastrado.");
            return null;
        }
        
        String nomeFuncionario = inputNomeFuncionario.getText();
        if(nomeFuncionario.length() == 0) {
            JOptionPane.showInternalMessageDialog(null, "O campo de nome está vazio.");
            return null;
        }
        
        String celularFuncionario = inputCelularFuncionario.getText();
        if(celularFuncionario.contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de número celular está vazio.");
            return null;
        }
        
        String emailFuncionario = inputEmailFuncionario.getText();
        if(funcionarioRepository.isEmailCadastrado(emailFuncionario)) {
            JOptionPane.showInternalMessageDialog(null, "Email já está em uso.");
            return null;
        }
        
        String senhaAcesso = new String(inputSenhaAcesso.getPassword());
        if(senhaAcesso.length() < 6) {
            JOptionPane.showInternalMessageDialog(null, "A senha precisa ter no minimo 6 digitos.");
            return null;
        }
        
        return new Funcionario(cpfFuncionario, nomeFuncionario, celularFuncionario, emailFuncionario, senhaAcesso);
    }
    
    public Funcionario leituraInputsFuncionarioUpdate() {
        String cpfFuncionario = inputCpfFuncionario.getText();
        if(cpfFuncionario.contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de CPF está vazio.");
            return null;
        }
        
        String nomeFuncionario = inputNomeFuncionario.getText();
        if(nomeFuncionario.length() == 0) {
            JOptionPane.showInternalMessageDialog(null, "O campo de nome está vazio.");
            return null;
        }
        
        String celularFuncionario = inputCelularFuncionario.getText();
        if(celularFuncionario.contains(" ")) {
            JOptionPane.showInternalMessageDialog(null, "Espaço de número celular está vazio.");
            return null;
        }
        
        String emailFuncionario = inputEmailFuncionario.getText();
        if(emailFuncionario.length() == 0) {
            JOptionPane.showInternalMessageDialog(null, "O campo de email está vazio.");
            return null;
        }
        
        String senhaAcesso = new String(inputSenhaAcesso.getPassword());
        if(senhaAcesso.length() < 6) {
            JOptionPane.showInternalMessageDialog(null, "A senha precisa ter no minimo 6 digitos.");
            return null;
        }
        
        return new Funcionario(cpfFuncionario, nomeFuncionario, celularFuncionario, emailFuncionario, senhaAcesso);
    }
    
    public void limparInputsFuncionarios() {
        inputCpfFuncionario.setText("");
        inputNomeFuncionario.setText("");
        inputCelularFuncionario.setText("");
        inputEmailFuncionario.setText("");
        inputSenhaAcesso.setText("");
    }
    
    public void listarFuncionario() {
        DefaultTableModel table = (DefaultTableModel) tableFuncionarios.getModel();
        table.setNumRows(0);
        for (Funcionario funcionario : funcionarioRepository.getAll()) {
            table.addRow(new Object[]{
                funcionario.getCpf(),
                funcionario.getNome(),
                funcionario.getCelular(),
                funcionario.getEmail()
            });
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gerenciador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gerenciador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gerenciador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gerenciador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gerenciador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PageCarros;
    private javax.swing.JPanel PageClientes;
    private javax.swing.JPanel PageFuncionarios;
    private javax.swing.JPanel PageMotos;
    private javax.swing.JPanel PageVendas;
    private javax.swing.JButton btnAtualizarCarro;
    private javax.swing.JButton btnAtualizarCliente;
    private javax.swing.JButton btnAtualizarFuncionario;
    private javax.swing.JButton btnAtualizarMoto;
    private javax.swing.JButton btnAtualizarVenda;
    private javax.swing.JButton btnBuscarVeiculo;
    private javax.swing.JButton btnBustarCliente;
    private javax.swing.JButton btnCadastrarCarro;
    private javax.swing.JButton btnCadastrarCliente;
    private javax.swing.JButton btnCadastrarFuncionario;
    private javax.swing.JButton btnCadastrarMoto;
    private javax.swing.JButton btnCadastrarVenda;
    private javax.swing.JPanel btnCarro;
    private javax.swing.JPanel btnClientes;
    private javax.swing.JButton btnCriarPagamento;
    private javax.swing.JButton btnDataAtual;
    private javax.swing.JButton btnDesselecionar;
    private javax.swing.JButton btnDesselecionar02;
    private javax.swing.JButton btnDesselecionarCliente;
    private javax.swing.JButton btnDesselecionarFuncionario;
    private javax.swing.JButton btnDesselecionarVenda;
    private javax.swing.JButton btnExcluirCarro;
    private javax.swing.JButton btnExcluirCliente;
    private javax.swing.JButton btnExcluirFuncionario;
    private javax.swing.JButton btnExcluirMoto;
    private javax.swing.JButton btnExcluirVenda;
    private javax.swing.JPanel btnFuncionarios;
    private javax.swing.JButton btnLimparCamposCliente;
    private javax.swing.JButton btnLimparCamposCliente1;
    private javax.swing.JButton btnLimparCamposVenda;
    private javax.swing.JButton btnLimparInputsCarro;
    private javax.swing.JButton btnLimparInputsMoto;
    private javax.swing.JPanel btnMotos;
    private javax.swing.JPanel btnVendas;
    private javax.swing.JComboBox<String> cbCambio;
    private javax.swing.JComboBox<FormaPagamento> cbFormasPagamento;
    private javax.swing.JComboBox<String> cbQtdPortas;
    private javax.swing.JComboBox<String> cbTipoCombustivel;
    private javax.swing.JFormattedTextField cpfClienteVenda;
    private javax.swing.JTextField inputAnoCarro;
    private javax.swing.JTextField inputAnoMoto;
    private javax.swing.JFormattedTextField inputCelularCliente;
    private javax.swing.JFormattedTextField inputCelularFuncionario;
    private javax.swing.JTextField inputCilindradaMoto;
    private javax.swing.JTextField inputCorCarro;
    private javax.swing.JTextField inputCorMoto;
    private javax.swing.JFormattedTextField inputCpfCliente;
    private javax.swing.JFormattedTextField inputCpfFuncionario;
    private javax.swing.JFormattedTextField inputDataNascimentoCliente;
    private javax.swing.JFormattedTextField inputDataVenda;
    private javax.swing.JTextField inputEmailCliente;
    private javax.swing.JTextField inputEmailFuncionario;
    private javax.swing.JTextField inputKmCarro;
    private javax.swing.JTextField inputKmMoto;
    private javax.swing.JTextField inputMarcaCarro;
    private javax.swing.JTextField inputMarcaMoto;
    private javax.swing.JTextField inputModeloCarro;
    private javax.swing.JTextField inputModeloMoto;
    private javax.swing.JTextField inputNomeCliente;
    private javax.swing.JTextField inputNomeFuncionario;
    private javax.swing.JTextField inputPlacaCarro;
    private javax.swing.JTextField inputPlacaMoto;
    private javax.swing.JTextField inputPlacaVeiculo;
    private javax.swing.JTextField inputPrecoVendaCarro;
    private javax.swing.JTextField inputPrecoVendaMoto;
    private javax.swing.JPasswordField inputSenhaAcesso;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPanel main;
    private javax.swing.JPanel navbar;
    private javax.swing.JLabel resultBuscaCliente;
    private javax.swing.JLabel resultBuscaVeiculo;
    private javax.swing.JTable tableCarros;
    private javax.swing.JTable tableClientes;
    private javax.swing.JTable tableFuncionarios;
    private javax.swing.JTable tableMotos;
    private javax.swing.JTable tableVendas;
    // End of variables declaration//GEN-END:variables

}
